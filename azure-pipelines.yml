# Gradle

# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
  - feaure/azure

variables:
  buildConfiguration: 'release'
  buildTag: '$(Build.BuildId)'
  latestTag: 'latest'

stages:
  - stage: 'stageBuild'
    displayName: Copy Release build to artifact staging
    jobs:
      - job: 'jobBuild'
        pool:
          vmImage: ubuntu-latest

        steps:
          #Enable gitcommands using this account
          - checkout: self
            persistCredentials: true
          
          #Config gitversion 5.3.x
          - task: gitversion/setup@0
            displayName: 'Setup git version'
            inputs:
              versionSpec: '5.3.x'
          
          #calculate the version of source code
          - task: gitversion/execute@0
            displayName: 'Calculate SemVer'
          
          #print in console current ersion
          - script: echo current version is $(GitVersion.SemVer)
            displayName: 'Display calculated version'
          
          #setting git user
          - task: CmdLine@2
            displayName: Init git global config
            inputs:
              script: |
                  git config --global user.email "EMAIL-OF-PIPELINE-USER"
                  git config --global user.name "Pipeline"  



          - task: Gradle@2
            inputs:
              workingDirectory: ''
              gradleWrapperFile: 'gradlew'
              gradleOptions: '-Xmx3072m'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.8'
              jdkArchitectureOption: 'x64'
              publishJUnitResults: true
              testResultsFiles: '**/TEST-*.xml'
              tasks: 'build'
          - task: CopyFiles@2
            displayName: Copy Release build to artifact staging
            condition: succeeded()
            inputs:
              sourceFolder: './build/libs/'
              contents: 'present-verb-*.jar'
              targetFolder: '$(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
              CleanTargetFolder: true
          - publish: '$(Build.ArtifactStagingDirectory)'
            displayName: 'Publish script'
            artifact: em-learning-artifacts
          - task: UniversalPackages@0
            inputs:
              command: 'publish'
              publishDirectory: '$(Build.ArtifactStagingDirectory)'
              feedsToUsePublish: 'internal'
              vstsFeedPublish: 'b6ad1af1-03f8-4fb8-905c-0febec8041fa/9708f494-a4a3-4cad-918a-b34763bacfcb'
              vstsFeedPackagePublish: 'ejemplo'
              versionOption: 'patch'
          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              containerRegistry: 'b6458ad2-36f6-4d5a-82fb-e7467aafd728'
              repository: 'emlearningimage'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
              buildContext: '$(System.DefaultWorkingDirectory)/'
              tags: |
                $(buildTag)
                $(latestTag)
          - task: CmdLine@2
            displayName: Create Git tag for current versi√≥n
            inputs:
              script: |
                git tag -a $(GitVersion.SemVer) -m "Release - $(GitVersion.SemVer)"
                git push origin $(GitVersion.SemVer)